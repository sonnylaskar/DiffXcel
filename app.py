import os
from flask import Flask, render_template, request, redirect, url_for, flash, send_file
from werkzeug.utils import secure_filename
import openpyxl
from difflib import HtmlDiff
from bs4 import BeautifulSoup
import uuid # For unique filenames
import datetime

# --- Flask App Configuration ---
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['REPORT_FOLDER'] = 'reports' # New folder for generated HTML reports
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # Max upload size: 16MB
app.secret_key = 'supersecretkey' # Used for flashing messages

# Ensure upload and report directories exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['REPORT_FOLDER'], exist_ok=True)

# --- Excel Diff Functions ---

# We no longer need to extract styles here as they will be in index.html
# def extract_styles():
#     """Extract CSS styles from a dummy diff for reuse in the report."""
#     dummy_diff = HtmlDiff().make_file([], [])
#     soup = BeautifulSoup(dummy_diff, 'html.parser')
#     style_tag = soup.find('style')
#     return str(style_tag) if style_tag else ""

def excel_to_lines(file_path, sheet_name):
    """Convert an Excel sheet to a list of lines (tab-separated cell values)."""
    try:
        wb = openpyxl.load_workbook(file_path, data_only=True, read_only=True)
        ws = wb[sheet_name]
        lines = []
        for row in ws.iter_rows(values_only=True):
            # Convert each cell to string, handle None, and clean newlines
            cleaned_row = [
                str(cell).replace('\n', ' ').replace('\r', '') if cell is not None else ''
                for cell in row
            ]
            lines.append("\t".join(cleaned_row))
        wb.close()
        return lines
    except Exception as e:
        print(f"Error processing sheet '{sheet_name}' in '{file_path}': {e}")
        return []

def generate_diff_report_html_string(original_file, modified_file):
    """
    Generates an HTML diff report content for two Excel files,
    displaying the diff in a single table as generated by HtmlDiff.
    Returns the HTML content *without* full HTML document structure.
    """
    try:
        orig_wb = openpyxl.load_workbook(original_file, read_only=True)
        mod_wb = openpyxl.load_workbook(modified_file, read_only=True)
    except Exception as e:
        return f"<p style='color: red;'>Error loading Excel files: {e}</p>"

    orig_sheets = set(orig_wb.sheetnames)
    mod_sheets = set(mod_wb.sheetnames)
    orig_wb.close()
    mod_wb.close()

    common_sheets = orig_sheets & mod_sheets
    only_orig = orig_sheets - mod_sheets
    only_mod = mod_sheets - orig_sheets

    sheets_with_diffs = []
    diff_sections_html = ""

    # Generate index for common sheets with differences
    index_html = ""
    if common_sheets:
        index_html += "<h2>Index of Differentiated Sheets</h2><ul>"
        for sheet in sorted(list(common_sheets)):
            orig_lines = excel_to_lines(original_file, sheet)
            mod_lines = excel_to_lines(modified_file, sheet)

            if orig_lines == mod_lines:
                continue

            # Create a clean ID for the sheet section
            clean_sheet_id = f"sheet_{sheet.replace(' ', '_').replace('.', '_').replace('-', '_')}"
            sheets_with_diffs.append({
                'name': sheet,
                'id': clean_sheet_id
            })

            # Add index item with link
            index_html += f"<li><a href='#{clean_sheet_id}' class='text-blue-600 hover:underline'>{sheet}</a></li>"
        index_html += "</ul><hr/>"

    html_content = ""
    if index_html:
        html_content += index_html

    # Sections for sheets only in original/modified files
    if only_orig:
        html_content += "<h2>Sheets Only in Original File</h2><ul>"
        for sheet in sorted(list(only_orig)):
            html_content += f"<li>{sheet}</li>"
        html_content += "</ul><hr/>"

    if only_mod:
        html_content += "<h2>Sheets Only in Modified File</h2><ul>"
        for sheet in sorted(list(only_mod)):
            html_content += f"<li>{sheet}</li>"
        html_content += "</ul><hr/>"

    # Generate the diff sections with proper IDs
    for sheet_info in sheets_with_diffs:
        sheet = sheet_info['name']
        sheet_id = sheet_info['id']
        
        orig_lines = excel_to_lines(original_file, sheet)
        mod_lines = excel_to_lines(modified_file, sheet)

        html_diff_content = HtmlDiff().make_file(
            orig_lines, mod_lines,
            fromdesc=f"{os.path.basename(original_file)}",
            todesc=f"{os.path.basename(modified_file)}"
        )

        soup = BeautifulSoup(html_diff_content, 'html.parser')
        diff_table = soup.find('table', {'class': 'diff'})

        if not diff_table:
            continue

        diff_sections_html += f"""
        <div class="sheet-container" id="{sheet_id}">
            <h2>Sheet: {sheet}</h2>
            <div class="diff-container">
                {str(diff_table)}
            </div>
        </div>
        """

    html_content += diff_sections_html
    return html_content

def generate_standalone_report(original_file, modified_file, report_id):
    """Generates a complete standalone HTML report file."""
    # Get the diff content
    diff_content = generate_diff_report_html_string(original_file, modified_file)
    
    # Create a complete HTML document with minimal styling
    standalone_html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Excel Diff Report - {report_id}</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 20px;
                color: #333;
            }}
            h1, h2 {{
                color: #2c5282;
            }}
            .diff-container {{
                width: 100%;
                overflow-x: auto;
                margin-bottom: 30px;
            }}
            table.diff {{
                width: 100%;
                border-collapse: collapse;
                margin-top: 15px;
                font-size: 0.9rem;
                table-layout: auto;
                min-width: max-content;
            }}
            table.diff th, table.diff td {{
                padding: 8px 12px;
                border: 1px solid #e2e8f0;
                vertical-align: top;
                white-space: pre-wrap;
                word-break: break-word;
            }}
            table.diff .diff_header {{ background-color: #e0f2fe; font-weight: bold; color: #2c5282; }}
            table.diff .diff_next, table.diff .diff_prev {{ text-align: right; background-color: #f0f4f8; }}
            table.diff .diff_add {{ background-color: #e6ffed; }}
            table.diff .diff_chg {{ background-color: #fffbeb; }}
            table.diff .diff_sub {{ background-color: #fee2e2; }}
            table.diff .diff_skip {{ background-color: #f7fafc; }}
            a {{
                color: #2b6cb0;
                text-decoration: none;
            }}
            a:hover {{
                text-decoration: underline;
            }}
            hr {{
                border: 0;
                height: 1px;
                background-color: #e2e8f0;
                margin: 20px 0;
            }}
        </style>
    </head>
    <body>
        <h1>Excel Diff Report</h1>
        <p>Generated on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        {diff_content}
    </body>
    </html>
    """
    return standalone_html
    
# --- Flask Routes (no changes needed here, as report_html_content will be passed correctly) ---

@app.route('/', methods=['GET'])
def index():
    """Renders the main upload form."""
    return render_template('index.html', report_content=None)

@app.route('/upload', methods=['POST'])
def upload_files():
    """Handles file uploads, generates report, and displays it."""
    try:
        if 'original_file' not in request.files or 'modified_file' not in request.files:
            flash('Both original and modified Excel files are required.', 'error')
            return redirect(url_for('index'))

        original_file = request.files['original_file']
        modified_file = request.files['modified_file']

        if original_file.filename == '' or modified_file.filename == '':
            flash('Please select both files.', 'error')
            return redirect(url_for('index'))

        if not (original_file.filename.endswith('.xlsx') and modified_file.filename.endswith('.xlsx')):
            flash('Only .xlsx files are supported.', 'error')
            return redirect(url_for('index'))

        # Validate file size
        max_size = app.config['MAX_CONTENT_LENGTH']
        if original_file.content_length > max_size or modified_file.content_length > max_size:
            flash(f'File size exceeds limit of {max_size / (1024 * 1024)} MB.', 'error')
            return redirect(url_for('index'))

        # Process files
        unique_id = str(uuid.uuid4())
        orig_filename = secure_filename(original_file.filename)
        mod_filename = secure_filename(modified_file.filename)
        
        # Save temporary files
        orig_temp_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{unique_id}_orig_{orig_filename}")
        mod_temp_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{unique_id}_mod_{mod_filename}")
        
        original_file.save(orig_temp_path)
        modified_file.save(mod_temp_path)

        # Generate report
        standalone_html = generate_standalone_report(orig_temp_path, mod_temp_path, unique_id)
        
        # Save report
        report_filename = f"report_{unique_id}.html"
        report_path = os.path.join(app.config['REPORT_FOLDER'], report_filename)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(standalone_html)

        # Generate content for in-app display
        report_html_content = generate_diff_report_html_string(orig_temp_path, mod_temp_path)

        flash('Report generated successfully!', 'success')
        return render_template('index.html', 
                            report_content=report_html_content,
                            report_id=unique_id)

    except Exception as e:
        flash(f'An error occurred: {str(e)}', 'error')
        # Clean up any temporary files if they were created
        if 'orig_temp_path' in locals() and os.path.exists(orig_temp_path):
            os.remove(orig_temp_path)
        if 'mod_temp_path' in locals() and os.path.exists(mod_temp_path):
            os.remove(mod_temp_path)
        return redirect(url_for('index'))
        
@app.route('/report/<report_id>', methods=['GET'])
def display_report(report_id):
    """Displays the generated HTML report."""
    report_filename = f"report_{report_id}.html"
    report_path = os.path.join(app.config['REPORT_FOLDER'], report_filename)

    if not os.path.exists(report_path):
        flash('Report not found or has expired.', 'error')
        return redirect(url_for('index'))
    
    try:
        return send_file(report_path, mimetype='text/html')
    except Exception as e:
        flash(f"Error loading report: {e}", 'error')
        return redirect(url_for('index'))
        
@app.route('/download_report/<report_id>', methods=['GET'])
def download_report(report_id):
    """Allows downloading the generated HTML report."""
    report_filename = f"report_{report_id}.html"
    report_path = os.path.join(app.config['REPORT_FOLDER'], report_filename)

    if not os.path.exists(report_path):
        flash('Report not found or has expired.', 'error')
        return redirect(url_for('index'))
    
    try:
        # Use as_attachment=True to force download, and specify filename for the user
        return send_file(report_path, as_attachment=True, download_name=report_filename, mimetype='text/html')
    except Exception as e:
        flash(f"Error downloading report: {e}", 'error')
        return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)